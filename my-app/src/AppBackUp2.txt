import React, { useState, useEffect } from 'react';

const App = () => {
  const [threads, setThreads] = useState([]);
  const [selectedThreadId, setSelectedThreadId] = useState('');
  const [posts, setPosts] = useState([]);
  const [message, setMessage] = useState('');
  const [isCreatingThread, setIsCreatingThread] = useState(false);

  // スレッド一覧を取得
  const fetchThreads = async () => {
    try {
      const response = await fetch('https://2y6i6tqn41.execute-api.ap-northeast-1.amazonaws.com/threads?offset=0');
      const data = await response.json();
      setThreads(data);
    } catch (error) {
      console.error('Error fetching threads:', error);
    }
  };

  useEffect(() => {
    fetchThreads();
  }, []);

  // 選択されたスレッドの投稿一覧を取得
  useEffect(() => {
    const fetchPosts = async () => {
      try {
        if (selectedThreadId) {
          const response = await fetch(`https://2y6i6tqn41.execute-api.ap-northeast-1.amazonaws.com/threads/${selectedThreadId}/posts?offset=0`);
          const data = await response.json();
          console.log('Fetched posts:', data);
          setPosts(data.posts);
        }
      } catch (error) {
        console.error('Error fetching posts:', error);
      }
    };

    fetchPosts();
  }, [selectedThreadId]);

  const createThread = async (event) => {
    event.preventDefault();

    const threadData = { title: event.target.title.value, content: event.target.content.value };

    try {
      const response = await fetch('https://2y6i6tqn41.execute-api.ap-northeast-1.amazonaws.com/threads', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(threadData),
      });
      const data = await response.json();
      console.log('New thread created:', data);
      setIsCreatingThread(false);
      fetchThreads();
    } catch (error) {
      console.error('Error creating thread:', error);
    }
  };

  const sendMessage = async (event) => {
    event.preventDefault();

    const postData = { post: message };

    try {
      const response = await fetch(`https://2y6i6tqn41.execute-api.ap-northeast-1.amazonaws.com/threads/${selectedThreadId}/posts`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(postData),
      });
      const data = await response.json();
      console.log('New post created:', data);
      setMessage('');

      // 新しい投稿を投稿一覧に反映するため、最新の投稿一覧を取得
      const updatedResponse = await fetch(`https://2y6i6tqn41.execute-api.ap-northeast-1.amazonaws.com/threads/${selectedThreadId}/posts?offset=0`);
      const updatedData = await updatedResponse.json();
      setPosts(updatedData.posts);
    } catch (error) {
      console.error('Error creating post:', error);
    }
  };

  const handleChange = (event) => {
    setMessage(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log('Submitted message:', message);
    sendMessage(event);
    setMessage('');
  };

  const handleCreateThread = () => {
    setIsCreatingThread(true);
  };

  const handleBackToThreadList = () => {
    setSelectedThreadId('');
  };

  const handleThreadClick = (threadId) => {
    setSelectedThreadId(threadId);
  };

  return (
    <div>
      {isCreatingThread ? (
        <div>
          <h2>新規スレッド作成</h2>
          <form onSubmit={createThread}>
            <label>
              タイトル:
              <input type="text" name="title" />
            </label>
            <br />
            <label>
              内容:
              <textarea name="content" />
            </label>
            <br />
            <button type="submit">作成</button>
            <button type="button" onClick={() => setIsCreatingThread(false)}>キャンセル</button>
          </form>
        </div>
      ) : (
        <div>
          {!selectedThreadId ? (
            <>
              <h2>スレッド一覧</h2>
              <ul>
                {threads.map((thread) => (
                  <li key={thread.id} onClick={() => handleThreadClick(thread.id)}>
                    {thread.title}
                  </li>
                ))}
              </ul>

              <button onClick={handleCreateThread}>スレッド作成</button>
            </>
          ) : (
            <>
              <h2>スレッド内投稿一覧</h2>
              
              <ul>
                {posts.map((post) => (
                  <li key={post.id}>{post.post}</li>
                ))}
              </ul>

              <h2>メッセージ送信フォーム</h2>
              <form onSubmit={handleSubmit}>
                <label>
                  メッセージ:
                  <textarea value={message} onChange={handleChange} name="content" />
                </label>
                <br />
                <button type="submit">送信</button>
              </form>
              <button onClick={handleBackToThreadList}>スレッド一覧に戻る</button>
            </>
          )}
        </div>
      )}
    </div>
  );
};

export default App;
